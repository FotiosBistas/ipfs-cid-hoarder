package hoarder

import (
	"context"
	"math/rand"
	"sync"

	"github.com/ipfs/go-cid"
	mh "github.com/multiformats/go-multihash"
	"github.com/pkg/errors"
	log "github.com/sirupsen/logrus"
)

var (
	CidLimitError error = errors.New("limit of cids reached")
)

// CidGenerator composes the basic object that generates set of CIDs defined in the configuration
type CidGenerator struct {
	ctx         context.Context
	generatorWG *sync.WaitGroup

	contentSize int
	cidNumber   int

	generator *randomCidGen
	newCidC   chan *cid.Cid
	doneC     chan struct{}
	doneNotC  chan struct{}
}

// NewCidTracker generates a new instance of the CIDTracker
func NewCidGenerator(
	ctx context.Context,
	cSize, cNumber int) *CidGenerator {

	return &CidGenerator{
		ctx:         ctx,
		generatorWG: new(sync.WaitGroup),
		contentSize: cSize,
		cidNumber:   cNumber,
		generator:   newRandomCidGen(cSize, cNumber),
		newCidC:     make(chan *cid.Cid, 1),
		doneC:       make(chan struct{}, 1),
	}
}

// Generates cids depending on the cid source
func (g *CidGenerator) Run() (chan *cid.Cid, *sync.WaitGroup) {
	g.generatorWG.Add(1)
	go func() {
		glog := log.WithField("mod", "cid-generator")
		defer func() {
			g.generatorWG.Done()
			glog.Info("successfully closed")
			close(g.doneC)
		}()
		for {
			select {
			case <-g.ctx.Done():
				glog.Info("context shutdown detected")
				return
			case <-g.doneC:
				glog.Info("controled shutdown detected")
				return
			default:
				contId, err := g.generator.getNewCid()
				switch err {
				case CidLimitError:
					glog.Infof("Cid mark reached: %d, clossing generator", g.cidNumber)
					return
				case nil:
					glog.Infof("generated new CID %s", contId.Hash().B58String())
					g.newCidC <- &contId
				default:
					glog.Error("Error generating new CID: %s", err.Error())
				}
			}
		}
	}()
	return g.newCidC, g.generatorWG
}

func (g *CidGenerator) Close() {
	g.doneC <- struct{}{}
}

type randomCidGen struct {
	contentSize int
	//keeps track of how many cids have been generated by the random cid gen struct
	cidsGenerated int
	//limit of how many cids to generate (-1 to run it contineously)
	limit int
}

func newRandomCidGen(contentSize int, limit int) *randomCidGen {
	return &randomCidGen{
		contentSize:   contentSize,
		cidsGenerated: 0,
		limit:         limit,
	}
}

// getRandomContent returns generates an array of random bytes with the given size and the composed CID of the content
func (g *randomCidGen) getNewCid() (cid.Cid, error) {
	if g.cidsGenerated >= g.limit && g.limit > 0 { // allow cid-number = -1 to propose continuously untill stop
		return cid.Cid{}, CidLimitError
	}

	g.cidsGenerated++
	// generate random bytes
	content := make([]byte, g.contentSize)
	rand.Read(content)

	// configure the type of CID that we want
	pref := cid.Prefix{
		Version:  1,
		Codec:    cid.Raw,
		MhType:   mh.SHA2_256,
		MhLength: -1,
	}

	// get the CID of the content we just generated
	contID, err := pref.Sum(content)
	if err != nil {
		return cid.Cid{}, errors.Wrap(err, "composing CID")
	}
	return contID, nil
}
